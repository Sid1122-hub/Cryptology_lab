
1. Perform brute force attack on the cipher text "dvvkzecfssprkkve":
def caesar_decrypt(cipher, shift):
    result = ''
    for char in cipher:
        if char.isalpha():
            shift_base = ord('a') if char.islower() else ord('A')
            result += chr((ord(char) - shift_base - shift) % 26 + shift_base)
        else:
            result += char
    return result

def brute_force_attack(cipher):
    for shift in range(26):
        print(f'Shift {shift}: {caesar_decrypt(cipher, shift)}')

brute_force_attack("dvvkzecfssprkkve")

2. Brute force attack on Affine cipher to find keys:
def affine_decrypt(cipher, a, b):
    if gcd(a, 26) != 1:
        return "Invalid 'a' value"
    result = ''
    a_inv = pow(a, -1, 26)
    for char in cipher:
        if char.isalpha():
            shift_base = ord('A')
            result += chr((a_inv * (ord(char) - shift_base - b) % 26) + shift_base)
        else:
            result += char
    return result

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def brute_force_affine(cipher, plain_text_sample):
    for a in range(1, 26):
        for b in range(26):
            if gcd(a, 26) == 1:
                decrypted_text = affine_decrypt(cipher, a, b)
                if decrypted_text.startswith(plain_text_sample):
                    print(f'a={a}, b={b}, Decrypted: {decrypted_text}')

brute_force_affine("XPALASXYFGFUKPXUSOGEUTKCDGFXANMGNVS", "GL")

3. Encrypt using Rail Fence cipher:
def rail_fence_encrypt(text, key):
    rail = [['
' for i in range(len(text))] for j in range(key)]
    direction_down = False
    row, col = 0, 0
    for i in range(len(text)):
        if row == 0 or row == key - 1:
            direction_down = not direction_down
        rail[row][col] = text[i]
        col += 1
        row = row + 1 if direction_down else row - 1
    result = []
    for i in range(key):
        for j in range(len(text)):
            if rail[i][j] != '
':
                result.append(rail[i][j])
    return "".join(result)

4. Decrypt using Rail Fence cipher:
def rail_fence_decrypt(cipher, key):
    rail = [['
' for i in range(len(cipher))] for j in range(key)]
    direction_down = None
    row, col = 0, 0
    for i in range(len(cipher)):
        if row == 0 or row == key - 1:
            direction_down = not direction_down
        rail[row][col] = '*'
        col += 1
        row = row + 1 if direction_down else row - 1
    index = 0
    for i in range(key):
        for j in range(len(cipher)):
            if rail[i][j] == '*' and index < len(cipher):
                rail[i][j] = cipher[index]
                index += 1
    result = []
    row, col = 0, 0
    for i in range(len(cipher)):
        if row == 0 or row == key - 1:
            direction_down = not direction_down
        if rail[row][col] != '
':
            result.append(rail[row][col])
            col += 1
        row = row + 1 if direction_down else row - 1
    return "".join(result)
