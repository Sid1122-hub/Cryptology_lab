
1. Reverse the content of a string without using built-in functions:
def reverse_string(s):
    result = ''
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result

2. Basic string compression using counts of repeated characters:
def string_compression(s):
    compressed = ''
    count = 1
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            count += 1
        else:
            compressed += s[i-1] + str(count)
            count = 1
    compressed += s[-1] + str(count)
    return compressed

3. Decrypt a Caesar cipher:
def caesar_decrypt(cipher, shift):
    result = ''
    for char in cipher:
        if char.isalpha():
            shift_base = ord('a') if char.islower() else ord('A')
            result += chr((ord(char) - shift_base - shift) % 26 + shift_base)
        else:
            result += char
    return result

4. Identify the key used in shift cipher using brute force:
def brute_force_caesar(cipher):
    for shift in range(1, 26):
        print(f'Shift {shift}: {caesar_decrypt(cipher, shift)}')

5. Find the k value from ciphertext and plaintext:
def find_k(plain, cipher):
    k = (ord(cipher[0]) - ord(plain[0])) % 26
    return k

6. Encrypt and decrypt using Atbash cipher:
def atbash_cipher(text):
    result = ''
    for char in text:
        if char.isalpha():
            result += chr(25 - (ord(char.lower()) - ord('a')) + ord('a'))
        else:
            result += char
    return result

7. Encrypt and decrypt using Affine cipher with validation:
def affine_encrypt(text, a, b):
    if gcd(a, 26) != 1:
        return "Invalid 'a' value"
    result = ''
    for char in text:
        if char.isalpha():
            shift_base = ord('a') if char.islower() else ord('A')
            result += chr(((a * (ord(char) - shift_base) + b) % 26) + shift_base)
        else:
            result += char
    return result

def affine_decrypt(cipher, a, b):
    if gcd(a, 26) != 1:
        return "Invalid 'a' value"
    result = ''
    a_inv = pow(a, -1, 26)
    for char in cipher:
        if char.isalpha():
            shift_base = ord('a') if char.islower() else ord('A')
            result += chr((a_inv * (ord(char) - shift_base - b) % 26) + shift_base)
        else:
            result += char
    return result

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
